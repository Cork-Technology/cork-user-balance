# Schema definition for the custom Envio indexer.
#
# This file combines the automatically generated event entities with
# additional domain models for accounts, tokens, pools and prices.

############################
# Domain Models
############################

enum TokenType {
  CPT
  CST
  CA
  REF
}

type Account {
  # id is the `chain-accountAddress`
  id: ID!
  address: String! @index
  transfersFrom: [TokenTransfer!]! @derivedFrom(field: "from")
  transfersTo: [TokenTransfer!]! @derivedFrom(field: "to")
  approvals: [TokenApproval!]! @derivedFrom(field: "owner")
  tokens: [AccountToken!]! @derivedFrom(field: "account")
  tokenEntries: [AccountTokenEntry!]! @derivedFrom(field: "account")
}

type AccountToken {
  # id is the `chain-tokenAddress-accountAddress`
  id: ID!
  balance: BigInt! @index
  account: Account!
  token: Token!
}

type AccountTokenEntry {
  # id is [chain-block-logIndex]
  id: ID!
  # amount is the amount of tokens added (positive) or subtracted (negative)
  amount: BigInt! @index
  # timestamp is the time of the entry
  timestamp: Timestamp! @index
  # blockNumber is the block number of the entry
  blockNumber: Int! @index
  # transfer is the transfer that caused this entry
  transfer: TokenTransfer!
  account: Account!
  token: Token!
}

type Token {
  # id is the `chain-tokenAddress`
  id: ID!
  address: String! @index
  typ: TokenType! @index
  totalSupply: BigInt @index
  # pool is the pool that this token belongs to (for CPT/CST tokens)
  pool: Pool
  transfers: [TokenTransfer!]! @derivedFrom(field: "token")
  approvals: [TokenApproval!]! @derivedFrom(field: "token")
  accounts: [AccountToken!]! @derivedFrom(field: "token")
  accountEntries: [AccountTokenEntry!]! @derivedFrom(field: "token")
  priceUpdates: [TokenPrice!]! @derivedFrom(field: "token")
}

type TokenTransfer {
  # id is [chain-block-logIndex]
  id: ID!
  # amount is the amount of tokens transferred
  amount: BigInt! @index
  # timestamp is the time of the transfer
  timestamp: Timestamp! @index
  # blockNumber is the block number of the transfer
  blockNumber: Int! @index
  token: Token!
  from: Account!
  to: Account!
  # entries are a list of account balance changes of this transfer
  entries: [AccountTokenEntry!]! @derivedFrom(field: "transfer")
}

type TokenApproval {
  # id is [chain-tokenAddress-ownerAddress-spenderAddress]
  id: ID!
  # amount is the amount of tokens approved
  amount: BigInt!
  # timestamp is when this approval occurred
  timestamp: Timestamp! @index
  # blockNumber is the block number when this approval occurred
  blockNumber: Int! @index
  token: Token!
  owner: Account!
  spender: Account!
}

type Pool {
  # id is [chain-poolId]
  id: ID!
  poolId: Bytes! @index
  principalTokenAddr: String! @index
  swapTokenAddr: String! @index
  collateralAssetAddr: String! @index
  referenceAssetAddr: String! @index
  exchangeRateProviderAddr: String! @index
  expiry: BigInt!
  startBlock: Int!
  principalToken: Token!
  swapToken: Token!
  collateralAsset: PoolAsset!
  referenceAsset: PoolAsset!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
}

type PoolAsset {
  # id is the `chain-poolId-tokenAddress`
  id: ID!
  balance: BigInt! @index
  tvlUsd: BigInt
  tvlUpdatedAt: Timestamp
  # optional list of intermediate token IDs to reach USD (e.g., [ETH_token_id, USDT_token_id])
  usdHops: [String!]
  pool: Pool! @index
  token: Token! @index
  # entries logged against this pool asset
  entries: [PoolAssetEntry!]! @derivedFrom(field: "poolAsset")
}

type PoolAssetEntry {
  # id is [chain-block-logIndex]
  id: ID!
  amount: BigInt! @index
  timestamp: Timestamp! @index
  blockNumber: Int! @index
  poolAsset: PoolAsset!
}

type AssetPrice {
  # id is the `chain-fromTokenAddress-toTokenAddress` (unique per from/to token)
  id: ID!
  lastAnswer: BigInt!
  decimals: Int!
  updatedAt: Timestamp! @index
  toCurrency: String
  fromToken: Token! @index
  toToken: Token @index
}

type TokenPrice {
  # id is the `chain-tokenAddress`
  id: ID!
  price: BigInt!
  feedDecimals: Int!
  updatedAt: Timestamp!
  toCurrency: String!
  token: Token!
}

# Reverse index of which pools use a given token
  



############################
# Event Entities
############################

type CorkConfig_CorkPoolSet {
  id: ID!
  corkPool: String!
}

type CorkConfig_Paused {
  id: ID!
  account: String!
}

type CorkConfig_RoleAdminChanged {
  id: ID!
  role: String!
  previousAdminRole: String!
  newAdminRole: String!
}

type CorkConfig_RoleGranted {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type CorkConfig_RoleRevoked {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type CorkConfig_TreasurySet {
  id: ID!
  treasury: String!
}

type CorkConfig_Unpaused {
  id: ID!
  account: String!
}

type CorkPool_BaseRedemptionFeePercentageUpdated {
  id: ID!
  event_id: String!
  baseRedemptionFeePercentage: BigInt!
}

type CorkPool_Deposit {
  id: ID!
  marketId: String!
  sender: String!
  owner: String!
  assets: BigInt!
  shares: BigInt!
}

type CorkPool_DepositPaused {
  id: ID!
  marketId: String!
}

type CorkPool_DepositUnpaused {
  id: ID!
  marketId: String!
}

type CorkPool_Initialized {
  id: ID!
  version: BigInt!
}

type CorkPool_MarketCreated {
  id: ID!
  event_id: String!
  referenceAsset: String!
  collateralAsset: String!
  expiry: BigInt!
  exchangeRateProvider: String!
  principalToken: String!
  swapToken: String!
}

type CorkPool_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}



type CorkPool_ReturnPaused {
  id: ID!
  marketId: String!
}

type CorkPool_ReturnUnpaused {
  id: ID!
  marketId: String!
}

type CorkPool_Swap {
  id: ID!
  event_id: String!
  swaper: String!
  paUsed: BigInt!
  swapTokenUsed: BigInt!
  raReceived: BigInt!
  dsExchangeRate: BigInt!
  feePercentage: BigInt!
  fee: BigInt!
}

type CorkPool_SwapPaused {
  id: ID!
  marketId: String!
}

type CorkPool_SwapUnpaused {
  id: ID!
  marketId: String!
}

type CorkPool_UnwindSwap {
  id: ID!
  event_id: String!
  buyer: String!
  raUsed: BigInt!
  receivedReferenceAsset: BigInt!
  receivedSwapToken: BigInt!
  feePercentage: BigInt!
  fee: BigInt!
  exchangeRates: BigInt!
}

type CorkPool_UnwindSwapFeeRateUpdated {
  id: ID!
  event_id: String!
  unwindSwapFeeRate: BigInt!
}

type CorkPool_UnwindSwapPaused {
  id: ID!
  marketId: String!
}

type CorkPool_UnwindSwapUnpaused {
  id: ID!
  marketId: String!
}

type CorkPool_Upgraded {
  id: ID!
  implementation: String!
}



type CorkPool_WithdrawExtended {
  id: ID!
  marketId: String!
  sender: String!
  owner: String!
  assets0: BigInt!
  assets1: BigInt!
  shares0: BigInt!
  shares1: BigInt!
}

type CorkPool_WithdrawalPaused {
  id: ID!
  marketId: String!
}

type CorkPool_WithdrawalUnpaused {
  id: ID!
  marketId: String!
}

type ExchangeRateProvider_RateUpdated {
  id: ID!
  event_id: String!
  newRate: BigInt!
}

type PriceFeed_AnswerUpdated {
  id: ID!
  current: BigInt!
  roundId: BigInt!
  updatedAt: BigInt!
}

type SharesFactory_CorkPoolChanged {
  id: ID!
  oldCorkPool: String!
  newCorkPool: String!
}

type SharesFactory_Initialized {
  id: ID!
  version: BigInt!
}

type SharesFactory_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type SharesFactory_SharesDeployed {
  id: ID!
  collateralAsset: String!
  principalToken: String!
  swapToken: String!
}

type SharesFactory_Upgraded {
  id: ID!
  implementation: String!
}

type CorkPT_Transfer {
  id: ID!
  from: String!
  to: String!
  amount: BigInt!
}
type CorkST_Transfer {
  id: ID!
  from: String!
  to: String!
  amount: BigInt!
}
type CorkST_Approval {
  id: ID!
  owner: String!
  spender: String!
  amount: BigInt!
  srcAddress: String!
}
type CorkPT_Approval {
  id: ID!
  owner: String!
  spender: String!
  amount: BigInt!
  srcAddress: String!
}

type CorkPT_Withdraw {
  id: ID!
  caller: String!
  receiver: String!
  owner: String!
  assets: BigInt!
  shares: BigInt!
}

type CorkPT_Deposit {
  id: ID!
  caller: String!
  owner: String!
  assets: BigInt!
  shares: BigInt!
}

