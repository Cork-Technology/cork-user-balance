name: Core | Build & Deploy (prebuilt image on ECR)

on:
  workflow_call:
    inputs:
      environment: { description: "GitHub Environment", required: true, type: string }
      app_name: { description: "CVM/container_name", required: true, type: string }
      image_tag: { description: "Image tag in ECR", required: true, type: string }
      config_file: { description: "CONFIG_FILE", default: "config.yaml", required: false, type: string }
      vcpu: { description: "CVM vCPU", default: "2", required: false, type: string }
      memory: { description: "CVM RAM (MiB)", default: "2048", required: false, type: string }
      disk_size: { description: "CVM disk size (GiB)", default: "10", required: false, type: string }
    secrets:
      PHALA_CLOUD_API_KEY: { required: true }
      # PHALA_APP_ID: { required: true }
      DOCKER_IMAGE: { required: true }
      DSTACK_AWS_ACCESS_KEY_ID: { required: true }
      DSTACK_AWS_SECRET_ACCESS_KEY: { required: true }
      DSTACK_AWS_REGION: { required: true }
      DSTACK_AWS_ECR_REGISTRY: { required: true }

jobs:
  deploy:
    name: Deploy → ${{ inputs.app_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: envio-${{ inputs.app_name }}
      cancel-in-progress: true

    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
      DOCKER_TAG: ${{ inputs.image_tag }}
      APP_NAME: ${{ inputs.app_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Render docker-compose for deployment
        id: render
        shell: bash
        env:
          FULL_IMAGE: ${{ secrets.DOCKER_IMAGE }}:${{ inputs.image_tag }}
          APP_NAME: ${{ inputs.app_name }}
          DSTACK_AWS_ACCESS_KEY_ID: ${{ secrets.DSTACK_AWS_ACCESS_KEY_ID }}
          DSTACK_AWS_SECRET_ACCESS_KEY: ${{ secrets.DSTACK_AWS_SECRET_ACCESS_KEY }}
          DSTACK_AWS_REGION: ${{ secrets.DSTACK_AWS_REGION }}
          DSTACK_AWS_ECR_REGISTRY: ${{ secrets.DSTACK_AWS_ECR_REGISTRY }}
        run: |
          set -euo pipefail
          esc() { printf '%s' "$1" | sed -e 's/[\/&]/\\&/g'; }
          cp docker-compose.yml docker-compose.rendered.yml
          sed -E -i "s|\$\{DOCKER_IMAGE\}|$(esc "$FULL_IMAGE")|g" docker-compose.rendered.yml
          sed -E -i "s|container_name:\s*\$\{APP_NAME(:-[^}]*)?\}|container_name: $(esc "$APP_NAME")|g" docker-compose.rendered.yml
          sed -E -i "s|\$\{DSTACK_AWS_ACCESS_KEY_ID(:-[^}]*)?\}|$(esc "$DSTACK_AWS_ACCESS_KEY_ID")|g" docker-compose.rendered.yml
          sed -E -i "s|\$\{DSTACK_AWS_SECRET_ACCESS_KEY(:-[^}]*)?\}|$(esc "$DSTACK_AWS_SECRET_ACCESS_KEY")|g" docker-compose.rendered.yml
          sed -E -i "s|\$\{DSTACK_AWS_REGION(:-[^}]*)?\}|$(esc "$DSTACK_AWS_REGION")|g" docker-compose.rendered.yml
          sed -E -i "s|\$\{DSTACK_AWS_ECR_REGISTRY(:-[^}]*)?\}|$(esc "$DSTACK_AWS_ECR_REGISTRY")|g" docker-compose.rendered.yml
          echo "compose=docker-compose.rendered.yml" >> "$GITHUB_OUTPUT"
      
      - name: Deploy to Phala Cloud
        uses: Leechael/phala-deploy-action@v2
        with:
          phala-api-key: ${{ secrets.PHALA_CLOUD_API_KEY }}
          cvm-name: ${{ inputs.app_name }}
          compose-file: ${{ steps.render.outputs.compose }}   # ← use rendered file
          vcpu: ${{ inputs.vcpu }}
          memory: ${{ inputs.memory }}
          disk-size: ${{ inputs.disk_size }}
          app-id: ${{ secrets.PHALA_APP_ID }}
      